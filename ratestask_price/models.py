from django.db import models, connection

from ratestask_port.models import Ports


class Prices(models.Model):
    """
    The price entity is represented by the Prices model, which has been constructed according to the task description
    specifications. However, it is not applicable to this task since the table generated by Django using this model has a
    different name compared to the original database used in the task.
    """
    orig_code = models.ForeignKey(Ports, on_delete=models.CASCADE, null=True, blank=True, related_name='ports_origin')
    dest_code = models.ForeignKey(Ports, on_delete=models.CASCADE, null=True, blank=True, related_name='ports_destin')
    day = models.DateField()
    price = models.IntegerField()

    class Meta:
        verbose_name = 'price'
        verbose_name_plural = 'prices'

    def __str__(self):
        return f'{self.price}'

    @classmethod
    def get_avg_daily_prices_v1(cls, origins, destins, date_from, date_to):
        """
        This class methode queries for average daily prices by giving dates, origins, and destinations.
        :param origins: Origin ports code
        :param destins: Destination ports code
        :param date_from: Date from in YYY-MM-DD format
        :param date_to: Date to in YYY-MM-DD format
        :return: List of data
        """

        # Perform the SQL query
        with connection.cursor() as cursor:
            cursor.execute("SELECT DATE(dates.day) AS day, "
                           "CASE "
                           "WHEN COUNT(prices.price) >= 3 THEN COALESCE(ROUND(AVG(prices.price)), NULL) "
                           "END AS average_price "
                           "FROM (SELECT generate_series(%s::date, %s::date, '1 day') AS day) AS dates "
                           "LEFT JOIN prices ON prices.orig_code IN %s "
                           "AND prices.dest_code IN %s "
                           "AND DATE(prices.day) = dates.day "
                           "WHERE dates.day BETWEEN %s::date AND %s::date "
                           "GROUP BY dates.day ", [date_from, date_to,
                                                   origins, destins,
                                                   date_from, date_to])
            rows = cursor.fetchall()

        # Organize output data
        columns = [col[0] for col in cursor.description]
        data = [dict(zip(columns, row)) for row in rows]

        return data

    @classmethod
    def get_avg_daily_prices_v2(cls, origins, destins, date_from, date_to):
        """
        This class methode queries for average daily prices by giving dates, origins, and destinations. This function
        contains full date sequence between the given dates.
        :param origins: Origin port code or parent slug
        :param destins: Destination port code or parent slug
        :param date_from: Date from in YYY-MM-DD format
        :param date_to: Date to in YYY-MM-DD format
        :return: List of data
        """

        # Construct the query
        query = """
            WITH geohierarchy AS (
                WITH RECURSIVE cte AS (
                    SELECT l.slug FROM regions l WHERE l.slug IN ('{0}', '{1}')
                    UNION
                    SELECT r.slug FROM regions r
                    INNER JOIN cte ON cte.slug = r.parent_slug
                )
                SELECT * FROM cte
            ),
            daily_average_prices AS (
                SELECT prices.day, 
                    CASE
                        WHEN COUNT(prices.price) >= 3 THEN COALESCE(ROUND(AVG(prices.price)), NULL)
                    END AS average_price
                FROM prices
                JOIN ports orig_port ON prices.orig_code = orig_port.code
                JOIN ports dest_port ON prices.dest_code = dest_port.code
                WHERE (prices.orig_code = '{0}' OR orig_port.parent_slug IN (SELECT slug FROM geohierarchy))
                    AND (prices.dest_code = '{1}' OR dest_port.parent_slug IN (SELECT slug FROM geohierarchy))
                GROUP BY prices.day
            )
            SELECT DATE(dates.day) AS day, dap.average_price
            FROM (
                SELECT generate_series('{2}'::date, '{3}'::date, '1 day') AS day
            ) AS dates
            LEFT JOIN LATERAL (
                SELECT dap.average_price FROM daily_average_prices dap WHERE dap.day = dates.day
            ) dap ON true;
        """.format(origins, destins, date_from, date_to)

        # Perform the query
        with connection.cursor() as cursor:
            cursor.execute(query)
            rows = cursor.fetchall()

        # Organize output data
        columns = [col[0] for col in cursor.description]
        data = [dict(zip(columns, row)) for row in rows]

        return data
