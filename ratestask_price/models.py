from django.db import models, connection

from ratestask_port.models import Ports


class Prices(models.Model):
    """
    The price entity is represented by the Prices model, which has been constructed according to the task description
    specifications. However, it is not applicable to this task since the table generated by Django using this model has a
    different name compared to the original database used in the task.
    """
    orig_code = models.ForeignKey(Ports, on_delete=models.CASCADE, null=True, blank=True, related_name='ports_origin')
    dest_code = models.ForeignKey(Ports, on_delete=models.CASCADE, null=True, blank=True, related_name='ports_destin')
    day = models.DateField()
    price = models.IntegerField()

    class Meta:
        verbose_name = 'price'
        verbose_name_plural = 'prices'

    def __str__(self):
        return f'{self.price}'

    @classmethod
    def get_avg_daily_prices(cls, origins, destins, date_from, date_to):
        """
        This class methode queries for average daily prices by giving dates, origins, and destinations.
        :param origins: Origin ports code
        :param destins: Destination ports code
        :param date_from: Date from in YYY-MM-DD format
        :param date_to: Date to in YYY-MM-DD format
        :return: Database query
        """
        with connection.cursor() as cursor:
            cursor.execute("SELECT day, CASE WHEN COUNT(*) < 3 THEN NULL ELSE AVG(price) END AS average_price "
                           "FROM prices "
                           "WHERE orig_code IN %s "
                           "AND dest_code IN %s "
                           "AND day BETWEEN %s AND %s "
                           "GROUP BY day", [origins, destins, date_from, date_to])
            rows = cursor.fetchall()

        columns = [col[0] for col in cursor.description]
        data = [dict(zip(columns, row)) for row in rows]

        return data
